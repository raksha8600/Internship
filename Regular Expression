{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "728dc7ad-e40d-4c43-903a-36fdddb03f70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python:Exercises::PHP:exercises:\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def replace_characters(text):\n",
    "    pattern = r'[ ,.]'\n",
    "    new_text = re.sub(pattern, ':', text)\n",
    "    return new_text\n",
    "\n",
    "sample_text = 'Python Exercises, PHP exercises.'\n",
    "output = replace_characters(sample_text)\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "427fe625-6ef0-44a9-b0fd-0fbd32bd885a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Exercises', 'exercises']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def find_words_starting_with_a_or_e(text):\n",
    "    words = re.findall(r'\\b[aeAE]\\w+', text)\n",
    "    return words\n",
    "\n",
    "sample_text = 'Python Exercises, PHP exercises.'\n",
    "result = find_words_starting_with_a_or_e(sample_text)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bd0a2845-4b36-4977-9e00-62c1f866e59c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['This', 'sample', 'text', 'with', 'various', 'words', 'different', 'lengths']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def find_long_words(text):\n",
    "    pattern = re.compile(r'\\b\\w{4,}\\b')\n",
    "    words = pattern.findall(text)\n",
    "    return words\n",
    "\n",
    "sample_text = \"This is a sample text with various words of different lengths.\"\n",
    "result = find_long_words(sample_text)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d853f071-01b1-47dd-8ae5-6fce2830be58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['This', 'text', 'with', 'words']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def find_specific_length_words(text):\n",
    "    pattern = re.compile(r'\\b\\w{3,5}\\b')\n",
    "    words = pattern.findall(text)\n",
    "    return words\n",
    "\n",
    "sample_text = \"This is a sample text with various words of different lengths.\"\n",
    "result = find_specific_length_words(sample_text)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4a593557-431f-47da-ba98-6be88c4350d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "example.com\n",
      "hr@fliprobo.com\n",
      "github.com\n",
      "HelloData Science World\n",
      "DataScientist\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_parentheses(strings):\n",
    "    pattern = re.compile(r'\\s?\\(([^)]*)\\)')\n",
    "    cleaned_strings = [pattern.sub(r'\\1', string) for string in strings]\n",
    "    return cleaned_strings\n",
    "\n",
    "sample_text = [\n",
    "    \"example (.com)\",\n",
    "    \"hr@fliprobo (.com)\",\n",
    "    \"github (.com)\",\n",
    "    \"Hello (Data Science World)\",\n",
    "    \"Data (Scientist)\"\n",
    "]\n",
    "\n",
    "result = remove_parentheses(sample_text)\n",
    "for string in result:\n",
    "    print(string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6109d765-7b4d-46fd-8558-9a234b32bd52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text cleaned and saved back to the file.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_parentheses(text):\n",
    "    pattern = re.compile(r'\\s?\\([^)]*\\)')\n",
    "    cleaned_text = pattern.sub('', text)\n",
    "    return cleaned_text\n",
    "\n",
    "file_path = \"sample_text.txt\"\n",
    "\n",
    "with open(file_path, \"r\") as file:\n",
    "    lines = file.readlines()\n",
    "\n",
    "cleaned_lines = [remove_parentheses(line) for line in lines]\n",
    "\n",
    "with open(file_path, \"w\") as file:\n",
    "    file.writelines(cleaned_lines)\n",
    "\n",
    "print(\"Text cleaned and saved back to the file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9b1e13b-3e49-42c5-9af9-25f416fbfc62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Importance', 'Of', 'Regular', 'Expressions', 'In', 'Python']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "sample_text = \"ImportanceOfRegularExpressionsInPython\"\n",
    "split_words = re.findall('[A-Z][a-z]*', sample_text)\n",
    "\n",
    "print(split_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "21b3ca19-258b-4462-bd29-1d84d257c956",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RegularExpression1 IsAn2 ImportantTopic3 InPython\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def insert_spaces_between_numbers(text):\n",
    "    modified_text = re.sub(r'(\\d)([A-Za-z])', r'\\1 \\2', text)\n",
    "    return modified_text\n",
    "\n",
    "sample_text = \"RegularExpression1IsAn2ImportantTopic3InPython\"\n",
    "output = insert_spaces_between_numbers(sample_text)\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4272ab03-dcf2-4f40-b913-c8f9764a83e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R egularE xpression1I sA n2I mportantT opic3I nP ython\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def insert_spaces_between_words(text):\n",
    "    modified_text = re.sub(r'([A-Z\\d])([a-z])', r'\\1 \\2', text)\n",
    "    return modified_text\n",
    "\n",
    "sample_text = \"RegularExpression1IsAn2ImportantTopic3InPython\"\n",
    "output = insert_spaces_between_words(sample_text)\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d85e3aa3-39c4-43b0-8efd-4be7b41a15e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hr@fliprobo.com\n",
      "hr@fliprobo\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def extract_email_addresses(text):\n",
    "    pattern = re.compile(r'\\b[\\w\\.-]+@[\\w\\.-]+\\b')\n",
    "    email_addresses = pattern.findall(text)\n",
    "    return email_addresses\n",
    "\n",
    "file_path = \"sample1_text.txt\"\n",
    "\n",
    "with open(file_path, \"r\") as file:\n",
    "    text = file.read()\n",
    "\n",
    "email_addresses = extract_email_addresses(text)\n",
    "for email in email_addresses:\n",
    "    print(email)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ca2b1a24-393d-45fa-a93c-7a901a8bbfd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello123 is a valid string.\n",
      "Python_Code is a valid string.\n",
      "user_name123 is a valid string.\n",
      "Invalid!String is not a valid string.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def validate_string(input_string):\n",
    "    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n",
    "    if pattern.match(input_string):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "test_strings = [\"Hello123\", \"Python_Code\", \"user_name123\", \"Invalid!String\"]\n",
    "\n",
    "for string in test_strings:\n",
    "    if validate_string(string):\n",
    "        print(f\"{string} is a valid string.\")\n",
    "    else:\n",
    "        print(f\"{string} is not a valid string.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "655624d5-c766-469f-b54b-48f38b05c605",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "123ABC starts with 123.\n",
      "456XYZ does not start with 123.\n",
      "789Python does not start with 123.\n",
      "42Guide does not start with 123.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def starts_with_number(input_string, number):\n",
    "    pattern = re.compile(r'^' + str(number))\n",
    "    return bool(pattern.match(input_string))\n",
    "\n",
    "test_strings = [\"123ABC\", \"456XYZ\", \"789Python\", \"42Guide\"]\n",
    "\n",
    "specific_number = 123\n",
    "\n",
    "for string in test_strings:\n",
    "    if starts_with_number(string, specific_number):\n",
    "        print(f\"{string} starts with {specific_number}.\")\n",
    "    else:\n",
    "        print(f\"{string} does not start with {specific_number}.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9289e544-5f52-4d04-949a-64fd83b1e1d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "192.10.1.12\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_leading_zeros(ip_address):\n",
    "    pattern = re.compile(r'\\b0+(\\d+)\\b')\n",
    "    cleaned_ip_address = pattern.sub(r'\\1', ip_address)\n",
    "    return cleaned_ip_address\n",
    "\n",
    "ip_address = \"192.010.001.012\"\n",
    "cleaned_ip = remove_leading_zeros(ip_address)\n",
    "print(cleaned_ip)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2c8e0f36-b4c8-4cfc-9b6b-28087d5bb0ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No date found\n"
     ]
    }
   ],
   "source": [
    "def extract_date(text):\n",
    "    pattern = re.compile(r'\\b[A-Z][a-z]+\\s\\d+(?:st|nd|rd|th)\\s\\d{4}\\b')\n",
    "    date = pattern.search(text)\n",
    "    if date:\n",
    "        return date.group()\n",
    "    else:\n",
    "        return \"No date found\"\n",
    "\n",
    "file_path = \"sample2_text.txt\"\n",
    "\n",
    "with open(file_path, \"r\") as file:\n",
    "    text = file.read()\n",
    "\n",
    "date_string = extract_date(text)\n",
    "print(date_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c9bc6b5b-1514-4a71-8d7b-cde1f257ae8f",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'group'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_3552\\3042123761.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     11\u001b[0m     \u001b[0mtext\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 13\u001b[1;33m \u001b[0mdate_string\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mextract_date\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     14\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdate_string\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_3552\\3042123761.py\u001b[0m in \u001b[0;36mextract_date\u001b[1;34m(text)\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[0mpattern\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mre\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mr'\\b[A-Z][a-z]+\\s\\d+(?:st|nd|rd|th)\\s\\d{4}\\b'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m     \u001b[0mdate\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpattern\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msearch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mdate\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mfile_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"sample2_text.txt\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'group'"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def extract_date(text):\n",
    "    pattern = re.compile(r'\\b[A-Z][a-z]+\\s\\d+(?:st|nd|rd|th)\\s\\d{4}\\b')\n",
    "    date = pattern.search(text)\n",
    "    return date.group()\n",
    "\n",
    "file_path = \"sample2_text.txt\"\n",
    "\n",
    "with open(file_path, \"r\") as file:\n",
    "    text = file.read()\n",
    "\n",
    "date_string = extract_date(text)\n",
    "print(date_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1124bee5-65d7-4bd8-8171-db5e3c07a876",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found words: ['fox', 'dog']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def search_literals(text, searched_words):\n",
    "    pattern = re.compile(r'\\b(?:' + '|'.join(re.escape(word) for word in searched_words) + r')\\b', re.IGNORECASE)\n",
    "    found_words = pattern.findall(text)\n",
    "    return found_words\n",
    "\n",
    "sample_text = 'The quick brown fox jumps over the lazy dog.'\n",
    "searched_words = ['fox', 'dog', 'horse']\n",
    "\n",
    "found_words = search_literals(sample_text, searched_words)\n",
    "print(\"Found words:\", found_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e60fb6d8-029b-4f35-8164-9d25810a5484",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Occurrences of 'fox': [(16, 19)]\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def search_and_locate(text, searched_word):\n",
    "    pattern = re.compile(re.escape(searched_word))\n",
    "    found_positions = [(match.start(), match.end()) for match in pattern.finditer(text)]\n",
    "    return found_positions\n",
    "\n",
    "sample_text = 'The quick brown fox jumps over the lazy dog.'\n",
    "searched_word = 'fox'\n",
    "\n",
    "found_positions = search_and_locate(sample_text, searched_word)\n",
    "print(f\"Occurrences of '{searched_word}':\", found_positions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d7f224e8-8f3f-42a8-ac40-7f559838a1b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Occurrences of 'exercises': [7, 22, 36]\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def find_substrings(text, pattern):\n",
    "    found_positions = [match.start() for match in re.finditer(re.escape(pattern), text)]\n",
    "    return found_positions\n",
    "\n",
    "sample_text = 'Python exercises, PHP exercises, C# exercises'\n",
    "pattern = 'exercises'\n",
    "\n",
    "found_positions = find_substrings(sample_text, pattern)\n",
    "print(f\"Occurrences of '{pattern}':\", found_positions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1d74d2d4-26d8-4b85-b2c4-6ba16b351ae2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Occurrences of 'exercises': [(7, 16), (22, 31), (36, 45)]\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def find_substring_occurrences(text, pattern):\n",
    "    found_positions = [(match.start(), match.end()) for match in re.finditer(re.escape(pattern), text)]\n",
    "    return found_positions\n",
    "\n",
    "sample_text = 'Python exercises, PHP exercises, C# exercises'\n",
    "pattern = 'exercises'\n",
    "\n",
    "found_positions = find_substring_occurrences(sample_text, pattern)\n",
    "print(f\"Occurrences of '{pattern}':\", found_positions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4c42fe78-20ad-426c-987d-6947577b7f7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converted date: 07-08-2023\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def convert_date_format(date):\n",
    "    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n",
    "    converted_date = pattern.sub(r'\\3-\\2-\\1', date)\n",
    "    return converted_date\n",
    "\n",
    "date_yyyy_mm_dd = \"2023-08-07\"\n",
    "converted_date = convert_date_format(date_yyyy_mm_dd)\n",
    "print(\"Converted date:\", converted_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4980645c-600b-4dac-b582-9116733fee28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['5.0', '5.25', '10.75']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def find_decimal_numbers(text):\n",
    "    pattern = re.compile(r'\\b\\d+\\.\\d{1,2}\\b')\n",
    "    decimal_numbers = pattern.findall(text)\n",
    "    return decimal_numbers\n",
    "\n",
    "sample_text = \"The price is 5.0 dollars, but it could be 5.25 or 10.75 dollars.\"\n",
    "result = find_decimal_numbers(sample_text)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1bcf3f36-8647-465c-8d2d-929cc8f041a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number: 123, Position: 10\n",
      "Number: 456, Position: 25\n",
      "Number: 789, Position: 47\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def separate_and_print_numbers(text):\n",
    "    pattern = re.compile(r'\\b\\d+\\b')\n",
    "    for match in pattern.finditer(text):\n",
    "        number = match.group()\n",
    "        position = match.start()\n",
    "        print(f\"Number: {number}, Position: {position}\")\n",
    "\n",
    "sample_text = \"There are 123 apples and 456 oranges, but only 789 bananas.\"\n",
    "separate_and_print_numbers(sample_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9408a552-0347-40ca-8b47-2cf0924133ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum numeric value: 950\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def extract_maximum_numeric_value(text):\n",
    "    pattern = re.compile(r'\\b\\d+\\b')\n",
    "    numeric_values = [int(match.group()) for match in pattern.finditer(text)]\n",
    "    max_value = max(numeric_values)\n",
    "    return max_value\n",
    "\n",
    "sample_text = 'My marks in each semester are: 947, 896, 926, 524, 734, 950, 642'\n",
    "max_numeric_value = extract_maximum_numeric_value(sample_text)\n",
    "print(\"Maximum numeric value:\", max_numeric_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "55348435-4537-4f4e-ae6f-6b768ae23871",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regular Expression Is An Important Topic In Python\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def insert_spaces_between_capital_words(text):\n",
    "    modified_text = re.sub(r'(?<=.)([A-Z])', r' \\1', text)\n",
    "    return modified_text\n",
    "\n",
    "sample_text = \"RegularExpressionIsAnImportantTopicInPython\"\n",
    "output = insert_spaces_between_capital_words(sample_text)\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a6f81e7c-b496-4be6-9f35-fcde55c934b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['This', 'Sample', 'Text', 'Uppercase', 'Sequences', 'This', 'One', 'Another', 'One', 'Here']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = \"This is a SampleText with UppercaseSequences like ThisOne and AnotherOneHere.\"\n",
    "\n",
    "pattern = re.compile(r'[A-Z][a-z]+')\n",
    "uppercase_sequences = pattern.findall(text)\n",
    "\n",
    "print(uppercase_sequences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f7db567b-53f5-4ea9-9845-2e53801d8a7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello hello world\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_continuous_duplicates(sentence):\n",
    "    cleaned_sentence = re.sub(r'(\\b\\w+\\b)(\\s+\\1)+', r'\\1', sentence)\n",
    "    return cleaned_sentence\n",
    "\n",
    "sample_text = \"Hello hello world\"\n",
    "output = remove_continuous_duplicates(sample_text)\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "02dec7b7-fdbd-44d1-9d91-bd5d83c0501c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello123 ends with an alphanumeric character.\n",
      "Python_Code_ does not end with an alphanumeric character.\n",
      "user_name123_ does not end with an alphanumeric character.\n",
      "Invalid!String ends with an alphanumeric character.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def ends_with_alphanumeric(input_string):\n",
    "    pattern = re.compile(r'^.*[a-zA-Z0-9]$')\n",
    "    if pattern.match(input_string):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "test_strings = [\"Hello123\", \"Python_Code_\", \"user_name123_\", \"Invalid!String\"]\n",
    "\n",
    "for string in test_strings:\n",
    "    if ends_with_alphanumeric(string):\n",
    "        print(f\"{string} ends with an alphanumeric character.\")\n",
    "    else:\n",
    "        print(f\"{string} does not end with an alphanumeric character.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "99f9a84f-3913-4517-883f-0e410e3de22d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['#Doltiwal', '#xyzabc', '#Demonetization']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "sample_text = \"\"\"RT @kapil_kausik: #Doltiwal I mean #xyzabc is \"hurt\" by #Demonetization as the same has rendered USELESS <ed><U+00A0><U+00BD><ed><U+00B1><U+0089> \"acquired funds\" No wo\"\"\"\n",
    "hashtags = re.findall(r'#\\w+', sample_text)\n",
    "\n",
    "print(hashtags)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4f511620-e0b1-472c-a100-aa7655aa3cf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "@Jags123456 Bharat band on 28??<ed><ed>Those who  are protesting #demonetization  are all different party leaders\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "sample_text = \"@Jags123456 Bharat band on 28??<ed><U+00A0><U+00BD><ed><U+00B8><U+0082>Those who  are protesting #demonetization  are all different party leaders\"\n",
    "cleaned_text = re.sub(r'<U\\+[A-F0-9]+>', '', sample_text)\n",
    "\n",
    "print(cleaned_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "bf09e21b-74f7-4bad-8628-2e6b342dba61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['07-08-2023']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def extract_dates_from_file(file_path):\n",
    "    with open(file_path, 'r') as file:\n",
    "        text = file.read()\n",
    "        dates = re.findall(r'\\d{2}-\\d{2}-\\d{4}', text)\n",
    "        return dates\n",
    "\n",
    "file_path = \"sample4_text.txt\"\n",
    "dates = extract_dates_from_file(file_path)\n",
    "\n",
    "print(dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9a51d907-930d-41f2-8a6f-912f7c1c9592",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " following example creates  ArrayList  a capacity   elements. 4 elements   added   ArrayList   ArrayList  trimmed accordingly.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_words_length_2_to_4(text):\n",
    "    pattern = re.compile(r'\\b\\w{2,4}\\b')\n",
    "    cleaned_text = pattern.sub('', text)\n",
    "    return cleaned_text\n",
    "\n",
    "sample_text = \"The following example creates an ArrayList with a capacity of 50 elements. 4 elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\n",
    "output = remove_words_length_2_to_4(sample_text)\n",
    "\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8f1b498-66d1-4a58-bbdc-e16dd1b0aa5a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
